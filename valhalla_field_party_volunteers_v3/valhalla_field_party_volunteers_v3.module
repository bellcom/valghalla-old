<?php

// valhalla_field_party_volunteers
module_load_all();

function valhalla_field_party_volunteers_v3_field_info() {
  return array(
      'party_volunteers_field_v3' => array(
          'label' => t('Number of volunteers pr party_v3'),
          'description' => t('Combines the party to the number of required volunteers for a specific polling station.'),
          'default_widget' => 'party_volunteers_standard_v3',
          'default_formatter' => 'party_volunteers_default_v3',
      ),
  );
}

function valhalla_field_party_volunteers_v3_field_schema() {
  $columns = array(
      'party_list' => array(
          'description' => 'Party reference.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
      ),
  );

  return array(
      'columns' => $columns,
          // TODO Add indexes.
  );
}

function valhalla_field_party_volunteers_v3_field_widget_info() {
  $widgets = array();

  $widgets['party_volunteers_standard_v3'] = array(
      'label' => t('Volunteers to Party v3'),
      'field types' => array('party_volunteers_field_v3',
          '#type' => 'custom_field_type',
          '#title' => t('Party'),
      ),
      'settings' => array(
          'available_parties' => array(),
      )
  );



  return $widgets;
}

function valhalla_field_party_volunteers_v3_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];
  $party_value = isset($items[$delta]['party_list']) ? $items[$delta]['party_list'] : '';

  if ($instance['widget']['type'] == 'party_volunteers_standard_v3') {
    $options = array(0 => t('Select Party'));
    foreach (taxonomy_get_tree(1) as $item) {
      $options[$item->tid] = $item->name;
    }
    $element = array(
        '#suffix' => '<a href="/node/add/roles?destination=' . $_SERVER['REQUEST_URI'] . '">Add one more role </a>'
    );
    $element['party_list'] = array(
        '#type' => 'select',
        '#title' => t('Party'),
        '#options' => $options,
        '#default_value' => $party_value,
    );
  }

  return $element;
}

function valhalla_field_party_volunteers_v3_field_formatter_info() {
  return array(
      'party_volunteers_default_v3' => array(
          'label' => t('Default'),
          'field types' => array('party_volunteers_field_v3'),
      ),
  );
}

function valhalla_field_party_volunteers_v3_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'party_volunteers_default_v3':
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['party_list']);
        $element[$delta]['#markup'] = '<p>' . $term->name . '</p>';
      }
      break;
  }
  return $element;
}

function valhalla_field_party_volunteers_v3_field_is_empty($item, $field) {
  return empty($item['party_list']);
}
