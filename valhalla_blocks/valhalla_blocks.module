<?php

/**
 * hook_block_info implementation
 *
 * @return array
 */
function valhalla_blocks_block_info() {
  return array(
    'party_status' => array(
      'info' => t('Parti status'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'party_constituency_status' => array(
      'info' => t('Valgkredsstatus'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'party_constituency_error' => array(
      'info' => t('Valgsted fejl'),
      'cache' => DRUPAL_NO_CACHE
    ),
  );
}

/**
 * implements hook_menu()
 */
function valhalla_blocks_menu(){
  $items['valhalla_blocks/ajax/view'] = array(
    'page callback' => 'valhalla_block_ajax_view',
    'access callback' => 'user_is_logged_in'
  );

  return $items;
}

/**
 * implements hook_init()
 */
function valhalla_blocks_init(){
  // JS for fetching block contents with AJAX.
  drupal_add_js(drupal_get_path('module', 'valhalla_blocks') . '/js/valhalla_blocks.js', 'file');
}

/**
 * hook_block_view implementation
 */
function valhalla_blocks_block_view($delta = '') {
  $cache = cache_get('valhalla_blocks_'.$delta);

  $loading = '<div id="valhalla_block-' . $delta . '">
    <div style="position: absolute;
        width: 100%;
        height: 100%;
        background: rgba(55, 55, 55, 0.4)"
      class="valhalla-loading-status">
    <div style="position:absolute;
        top: 50%;
        left: 45%;"
       class="loading-gif"></div></div>';
  $loading .= $cache->data;
  $loading .= '</div><script>valhalla_blocks.loadOverview("' . $delta . '");</script>';
  return array('content' => $loading);
}

/**
 * Page callback
 */
function valhalla_block_ajax_view($delta){
  print valhalla_blocks_generate_view($delta);
}

/**
 * Generate content for blocks
 *
 * @param string $delta
 * @return array
 */
function valhalla_blocks_generate_view($delta = '') {
  global $user, $language;

  $user_party_id = &drupal_static(__FUNCTION__);

  if (is_null($user_party_id)) {
    $user = user_load($user->uid);
    $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];

    $admin_user = FALSE;
    if (user_access('administer valhalla')) {
      $admin_user = TRUE;
    }
  }

  $restrict_polling_stations = FALSE;
  if (!empty ($user->field_polling_station[LANGUAGE_NONE])) {
    $restrict_polling_stations = array();
    foreach ($user->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }
  $roles=array();
  $res = db_select('node', 'n')
                    ->distinct()
                    ->fields('n', array('nid', 'title'))
                      ->condition('n.type', 'roles')
                    ->execute();

  while($rec = $res->fetchAssoc()) {
    $roles[$rec['nid']] = $rec['title'];
  }

  if (!user_access('administer volunteers') && (FALSE === $user_party_id)) {
    return array();
  }

  $block = array();
  switch ($delta) {
    case 'party_status':
      $view = '';

      // let administrators pic a party to see stats for
      if (TRUE === $admin_user) {
        $parties = array();

        $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'partier'")->fetchField();

        foreach (taxonomy_get_tree($vid) as $item) {
          $parties[] = '<span'.($user_party_id == $item->tid ? ' style="font-weight:bold;"' : '').'>' . l($item->name, 'valhalla/change/party/' . $item->tid) . '</span>';
        }
          $parties[] = '<span>' . l('alle', 'valhalla/change/party/0') . '</span>';
          $view .= '<div id="other-parties"><h3>Se status for liste:</h3><p>'.implode(', ', $parties).'</p></div>';
      }

      $query = new EntityFieldQuery();
      $query->entityCondition('bundle', 'polling_station')
            ->entityCondition('entity_type', 'node')
            ->propertyCondition('status', 1);
      $result = $query->execute();
      if(!empty($result)){
        $polling_stations = array_keys(array_shift($result));
      }

      $grand_total = 0;

      foreach($roles as $nid =>$title){
        $query = db_select('field_data_field_role_n'.$nid, 'vr');
        $query->innerJoin('field_data_field_party_list', 'vp', 'vp.entity_id=vr.entity_id ' );
        $query->innerJoin('field_data_field_volunteers_pr_party_1', 'vpp', 'vpp.field_volunteers_pr_party_1_value=vr.entity_id' );
        $query->addExpression('SUM(vr.field_role_n'.$nid.'_number_vo)');
        if ($user_party_id) {
          $query->condition('vp.field_party_list_party_list', $user_party_id);
        }
        if (is_array($restrict_polling_stations)) {
          $query->condition('vpp.entity_id', $restrict_polling_stations, 'IN');
        }
        $res=$query->execute()->fetchColumn();

        // Save the total for the role
        $total_role[$title] = $res;

        $grand_total+=$res;

        // tth: If user_party_id is set, the set taxonomy tree array to only include this id
        if($user_party_id){
          $taxonomy_tree = array(taxonomy_term_load($user_party_id));
        }
        else {
          // tth: Otherwise, we populate it with all terms
          $taxonomy = taxonomy_vocabulary_machine_name_load('partier');
          $taxonomy_tree = taxonomy_get_tree($taxonomy->vid);
        }

        // tth: Get all volunteer nodes
        foreach ($taxonomy_tree as $term) {
          $party_id = $term->tid;

          $volunteers_result = NULL;

          if($volunteers_result = valhalla_blocks_query_volunteers_all_stations($party_id, $nid, $polling_stations)){
            // tth: $volunteers_nids_array will end up containing node ids for all volunteers
            // with polling station posts on all polling stations for the selected party(/ies)
            // We save the title of the role as well, as we use this later for the extra counters
            $volunteers_nids_array[][$title] = $volunteers_result;
          }
        }
      }

      // tth: Zeroize variables before we start counting
      $total_volunteers = 0;
      $total_no = 0;
      $total_yes = 0;
      $total_missing = 0;
      $total_volunteers_role = array();

      // tth: start counting.
      if(isset($volunteers_nids_array)){
        foreach($volunteers_nids_array as $volunteer_nids){
          $role_title = key($volunteer_nids);

          if(!isset($volunteer_nids[$role_title])){
            continue;
          }

          $total_volunteers_role[$role_title] += count($volunteer_nids[$role_title]);
          $total_volunteers += count(reset($volunteer_nids));
          // tth: Get rsvp status for volunteers
          // No: rsvp_values(2/3)
          $rsvp_no = db_query('SELECT *
              FROM  `field_data_field_rsvp`
              WHERE  `entity_id`
              IN ( :volunteer_nids )
              AND `field_rsvp_value`
              IN ( :rsvp_values) ', array(
                ':volunteer_nids' => $volunteer_nids[$role_title],
                ':rsvp_values' => array(2, 3))
              )
              ->fetchAll();

          $no_role[$role_title] += count($rsvp_no);

          $total_no += count($rsvp_no);

          // tth: Yes: (rsvp_values = 1)
          $rsvp_yes = db_query('SELECT *
              FROM  `field_data_field_rsvp`
              WHERE  `entity_id`
              IN ( :volunteer_nids )
              AND `field_rsvp_value`
              IN ( :rsvp_values) ', array(
                ':volunteer_nids' => $volunteer_nids[$role_title],
                ':rsvp_values' => array(1))
              )
              ->fetchAll();

          $total_yes += count($rsvp_yes);
        }
      }

      // tth: Calculate number of missing replies
      $total_missing = $total_volunteers - ($total_yes + $total_no);

      // tth: Overall status, generate markup
      $view .= '
        <table>
          <tr>
            <td></td>
            <td></td>
            <td>Mangler</td>
          </tr>

          <tr>
            <td><div class="partistatusenhed">Status total</div></td>
            <td><div class="partistatusenhedvaerdi">' . ($total_volunteers) . '/' . $grand_total . '</div> </td>
            <td> <div class="partistatusenhedvaerdi">' . ($grand_total - ($total_volunteers)) . '</div> </td>
          </tr>

          <tr>
            <td>Bekr√¶ftede</td>
            <td><div class="partistatusenhedvaerdi">' . $total_yes . '</div> </td>
            <td></td>
          </tr>

          <tr>
            <td>Afviste</td>
            <td><div class="partistatusenhedvaerdi">' . $total_no . '</div> </td>
            <td></td>
          </tr>

          <tr>
            <td>Afventer svar</td>
            <td><div class="partistatusenhedvaerdi">' . $total_missing . '</div> </td>
            <td></td>
          </tr>

        </table>';


        // Role status
      $view .= '<table>
              <tr>
                <td></td>
                <td></td>
                <td>Mangler</td>
              </tr>
        ';


      $data = array();
      if(!$user_party_id){
        $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'partier'")->fetchField();

        foreach (taxonomy_get_tree($vid) as $item) {
          $data = valhalla_blocks_get_polling_station_data($item->tid, $data);
        }
      }
      else {
        $data = valhalla_blocks_get_polling_station_data($user_party_id);
      }

      foreach($data as $constituency){
        foreach($constituency as $polling_station){
          foreach ($polling_station as $key => $count){
            if(is_numeric($key)){
              $total_count_role[$key]['needed'] += $count['needed'];
              $total_count_role[$key]['count'] += $count['count'];
            }
          }
        }
      }

      foreach($roles as $nid =>$title){

        $no = '';
        if($no_role[$title]){
          $no = 'volunteer-status-cancelled';
        }

        if(!$total_volunteers_role[$title]){
          $total_volunteers_role[$title] = 0;
        }

        if(!$total_role[$title]){
          $total_role[$title] = 0;
        }

        $view .= '
            <tr>
              <td><div class="partistatusenhed">'. $title .'</div></td>
              <td><div class="partistatusenhedvaerdi '. $no .'">'. $total_count_role[$nid]['count'] . '/' . $total_count_role[$nid]['needed'] . '</div> </td>
              <td><div class="partistatusenhedvaerdi">' . ($total_count_role[$nid]['needed'] - $total_count_role[$nid]['count']) . '</div> </td>
            </tr>';
      }

      $view .= '</table>';
      break;

    case 'party_constituency_status':

      $data = array();
      if(!$user_party_id){
        $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'partier'")->fetchField();

        foreach (taxonomy_get_tree($vid) as $item) {
          $data = valhalla_blocks_get_polling_station_data($item->tid, $data);
        }
      }
      else {
        $data = valhalla_blocks_get_polling_station_data($user_party_id);
      }

      $output = '';
      ksort($data);

      // tth: This block uses the data from above to create som tables with an overview
      // of the posts on the polling station.
      foreach ($data as $constituency => $constituency_data) {
        $total=array();
        $table = array(
            'sticky' => FALSE,
            'header' => array_merge(array(
            $constituency,
            ), array_values($roles)),
            'rows' => array()
          );

        // Add "i alt" label to header
        $table['header']['total'] = 'I alt';

        foreach ($constituency_data as $id => $polling_station_data) {
          // Restrict list on frontpage, so the user cannot to see other polling stations
          // than he is allowed to.
          if (is_array($restrict_polling_stations) && !in_array($id, $restrict_polling_stations)) {
            continue;
          }

          $volunteers_data=array();

          $table['rows'][] =array(
            array('data' => l($polling_station_data['title'], 'volunteers/station/' . $id), 'class' => 'valgsted'));

          $row_nr=count($table['rows'])-1;

          // Variables for storing polling station totals
          $polling_station_needed_total = 0;
          $polling_station_total_total = 0;

          foreach($roles as $nid=>$title){
            // tth: Count posts in a new way
            // If the user_party_id is not set, we set it as a wildcard.
            // this gets ud all posts with the roles for the
            $party_id = $user_party_id;

            if(!$party_id){
              $party_id = '%';
            }
            $station_role_id = $party_id . $nid . $id;

            // tth: Query the volunteers nodes
            $volunteer_query = new EntityFieldQuery();
            $volunteer_query->fieldCondition('field_polling_station_post', 'value', $station_role_id, 'like')
              ->entityCondition('bundle', 'volunteers')
              ->entityCondition('entity_type', 'node')
              ->propertyCondition('status', 1);
            $reset_query = $volunteer_query->execute();
            $volunteers_array = reset($reset_query);

            if(is_array($volunteers_array)){
              $volunteer_nids = array_keys($volunteers_array);
            }
            else {
              $volunteer_nids = '';
            }

            $role_cancelled = '';

            $rsvp = db_query('SELECT *
              FROM  `field_data_field_rsvp`
              WHERE  `entity_id`
              IN ( :volunteer_nids )
              AND `field_rsvp_value`
              IN ( :rsvp_values) ', array(
                ':volunteer_nids' => $volunteer_nids,
                ':rsvp_values' => array(2, 3))
              )
              ->fetchAll();

            if(!empty($rsvp)){
              $role_cancelled = ' volunteer-status-cancelled';
            }

            if(!$polling_station_data[$nid]['count']){
              $polling_station_data[$nid]['count'] = 0 ;
            }

            if(!$polling_station_data[$nid]['needed']){
              $polling_station_data[$nid]['needed'] = 0 ;
            }

            $table['rows'][$row_nr][]=array(
                'data' => $polling_station_data[$nid]['count'] . '/' . $polling_station_data[$nid]['needed'], 'class' => 'vafva' . $role_cancelled,
              );

            $grand_total[$nid]['count'] += $polling_station_data[$nid]['count'];
            $grand_total[$nid]['needed'] += $polling_station_data[$nid]['needed'];
          }

          if(!$polling_station_data['count']){
            $polling_station_data['count'] = 0;
          }
          if(!$polling_station_data['needed']){
            $polling_station_data['needed'] = 0;
          }

          // Add totals column to the row.
          $table['rows'][$row_nr][]=array(
              'data' => $polling_station_data['count'] . '/' . $polling_station_data['needed'], 'class' => 'vafva',
            );
        }

        // Grand total for table
        if (count($table['rows'])) {
          $table['rows'][][] = array('data' => 'I alt', 'class' => 'total');
          $row_nr=count($table['rows'])-1;
          foreach($roles as $nid=>$title){
              $table['rows'][$row_nr][]=array('data' => $grand_total[$nid]['count'] . '/' . $grand_total[$nid]['needed'], 'class' => 'total');
          }
          // Make the table pretty, add an empty field to the bottom row
          $table['rows'][$row_nr][]=array('data' => '', 'class' => 'total');
          $output .= theme('table', $table);
        }
      }
      $view = $output;
      break;
    case 'party_constituency_error':

      $view = "";
      foreach (entity_load('node', FALSE, array('type' => 'polling_station')) as $polling_station) {
        if(in_array('Valgsekret√¶r', $user->roles)){
          $taxonomy = taxonomy_vocabulary_machine_name_load('partier');
          foreach (taxonomy_get_tree($taxonomy->vid) as $term) {
            $posts_array = valhalla_volunteers_to_polling_station_markup($polling_station, $term->tid, 'block3');
            if(!empty($posts_array['extra'])){
              $extra_array[] = array(
                'station_id' => $posts_array['station_id'],
                'polling_station_name' => $polling_station->title,
                'party_id' => $posts_array['party_id'],
              );
              $view = theme('station_error', array(
                'extra' => $extra_array,
              ));
            }
          }
        }
      }
      break;
  }

  cache_set('valhalla_blocks_'.$delta, $view);
  return $view;
}

/**
 * Fetch info for polling station
 *
 * Uses same function as the add to polling station view.
 */
function valhalla_blocks_get_polling_station_data($user_party_id, $data = array()){
  $role_array = _valhalla_helper_get_role_array();
  foreach (entity_load('node', FALSE, array('type' => 'constituency')) as $constituency) {
    $data[$constituency->title];
    $polling_station_nids = db_select('field_data_field_constituency', 'c')
      ->fields('c', array('entity_id'))
      ->condition('c.field_constituency_nid', $constituency->nid)
      ->execute()
      ->fetchAll(PDO::FETCH_COLUMN);

    foreach (node_load_multiple($polling_station_nids) as $polling_station) {
      $polling_station_posts = valhalla_volunteers_to_polling_station_roles($polling_station, $user_party_id);
      $data = valhalla_blocks_map_polling_station_data($data, $constituency, $polling_station, $polling_station_posts);
    }
  }
  return $data;
}

/**
 * Map the data from the polling station for use in the blocks
 */
function valhalla_blocks_map_polling_station_data($data, $constituency, $polling_station, $polling_station_posts){
  $role_array = _valhalla_helper_get_role_array();
  $data[$constituency->title][$polling_station->nid]['title'] = $polling_station->title;

  foreach ($polling_station_posts['posts_to_fill'] as $key => $post_to_fill){
    $role_id = $role_array[$post_to_fill['title']];

    $data[$constituency->title][$polling_station->nid]['needed']++;
    $data[$constituency->title][$polling_station->nid][$role_id]['needed']++;

    if($polling_station_posts['existing'][$key]){
      $data[$constituency->title][$polling_station->nid]['count']++;
      $data[$constituency->title][$polling_station->nid][$role_id]['count']++;
    }
  }
  return $data;
}


/**
 * Fetch all volunteer ids on all stations for given
 * party and role
 */
function valhalla_blocks_query_volunteers_all_stations($party_id, $role_id, $polling_stations){
  $volunteers = array();

  foreach($polling_stations as $station_id){
    $volunteer_query = new EntityFieldQuery();
    $volunteer_query->fieldCondition('field_polling_station_post', 'value', $party_id.$role_id.$station_id, 'like')
      ->entityCondition('bundle', 'volunteers')
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('status', 1);
    $reset_query = $volunteer_query->execute();
    $volunteers_array = reset($reset_query);

    if($volunteers_array){
      $volunteers += $volunteers_array;
    }
  }

  return array_keys($volunteers);
}

/**
 * implement hook_theme for valhalla_blocks module
 *
 * @param array $existing
 * @param string $type
 * @param string $theme
 * @param string $path
 * @return array
 */
function valhalla_blocks_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['station_error'] = array(
      'variables' => array('extra' => NULL),
      'template' => 'valhalla_blocks_station_error'
  );

  return $items;
}
