<?php

/**
 * hook_block_info implementation
 *
 * @return array
 */
function valhalla_blocks_block_info() {
  return array(
      'party_status' => array(
          'info' => t('Parti status'),
          'cache' => DRUPAL_NO_CACHE
      ),
      'party_constituency_status' => array(
          'info' => t('Valgkredsstatus'),
          'cache' => DRUPAL_NO_CACHE
      ),
  );
}

/**
 * hook_block_view implementation
 *
 * @param string $delta
 * @return array
 */
function valhalla_blocks_block_view($delta = '') {
  global $user, $language;

  $user_party_id = &drupal_static(__FUNCTION__);

  if (is_null($user_party_id)) {
    $user = user_load($user->uid);
    $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];

    $admin_user = FALSE;
    if (user_access('administer valhalla')) {
      $admin_user = TRUE;
    }
  }

  $restrict_polling_stations = FALSE;
  if (!empty($user->field_polling_station[LANGUAGE_NONE])) {
    $restrict_polling_stations = array();
    foreach ($user->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }
  $roles = array();
  $res = db_select('node', 'n')
          ->distinct()
          ->fields('n', array('nid', 'title'))
          ->condition('n.type', 'roles')
          ->execute();

  while ($rec = $res->fetchAssoc()) {
    $roles[$rec['nid']] = $rec['title'];
  }

  if (!user_access('administer volunteers') && (FALSE === $user_party_id)) {
    return array();
  }

  $block = array();
  switch ($delta) {
    case 'party_status':
      $block['content'] = '';

      // let administrators pic a party to see stats for
      if (TRUE === $admin_user) {

        $parties = array();

        $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'partier'")->fetchField();

        foreach (taxonomy_get_tree($vid) as $item) {
          $parties[] = '<span' . ($user_party_id == $item->tid ? ' style="font-weight:bold;"' : '') . '>' . l($item->name, 'valhalla/change/party/' . $item->tid) . '</span>';
        }
        $parties[] = '<span>' . l('alle', 'valhalla/change/party/0') . '</span>';
        $block['content'] .= '<div id="other-parties"><h3>Se status for liste:</h3><p>' . implode(', ', $parties) . '</p></div>';
      }

      $grand_total = 0;
      foreach ($roles as $nid => $title) {
        $query = db_select('field_data_field_role_n' . $nid, 'vr');
        $query->innerJoin('field_data_field_party_list', 'vpp', 'vpp.entity_id=vr.entity_id');
        $query->addExpression('SUM(vr.field_role_n' . $nid . '_number_vo)');
        if ($user_party_id) {
          $query->condition('vpp.field_party_list_party_list', $user_party_id);
        }
        if (is_array($restrict_polling_stations)) {
          $query->condition('vr.entity_id', $restrict_polling_stations, 'IN');
        }
        $res = $query->execute()
                ->fetchColumn();
        if (is_array($restrict_polling_stations) && !in_array($polling_station->nid, $restrict_polling_stations)) {
          continue;
        }
        $grand_total+=$res;
      }

      $query = db_select('field_data_field_party', 'p');
      $query->fields('p', array('entity_id'));
      if ($user_party_id) {
        $query->condition('p.field_party_tid', $user_party_id);
      }

      $query->condition('p.bundle', 'volunteers');
      $query = $query->execute();

      while ($nid = $query->fetchColumn()) {
        $node = node_load($nid);

        // un@bellcom.dk, 2012.09.11 moved to here from query section above
        if (is_array($restrict_polling_stations)) {
          if (!in_array($node->field_polling_station[$language->language][0]['nid'], $restrict_polling_stations)) {
            continue;
          }
        }

        if (isset($node->field_polling_station_post[$language->language][0]['value'])) {
          $total++;
          if (empty($node->field_rsvp[$language->language][0]['value'])) {
            $missing++;
          } 
          else {
            switch (strtolower($node->field_rsvp[$language->language][0]['value'])) {
              case '1': //yes
                $yes++;
                break;
              case '2': //no
              case '3': //never
                $no++;
                break;
            }
          }
        }
      }

      $block['content'] .= '
                <div class="partistatuslinie">
                  <div class="partistatusenhed">Status total</div>
                  <div class="partistatusenhedvaerdi">' . ($yes + $missing) . '/' . $grand_total . '</div>
                </div>
                <div class="partistatuslinie">
                  <div class="partistatusenhed">Bekr√¶ftede</div>
                  <div class="partistatusenhedvaerdi">' . $yes . '</div>
                </div>
                <div class="partistatuslinie">
                  <div class="partistatusenhed">Afventer svar</div>
                  <div class="partistatusenhedvaerdi">' . $missing . '</div>
                </div>
                <div class="partistatuslinie">
                  <div class="partistatusenhed">Afviste</div>
                  <div class="partistatusenhedvaerdi">' . $no . '</div>
                </div>
                <div class="partistatuslinie">
                  <div class="partistatusenhed">Ledige pladser</div>
                  <div class="partistatusenhedvaerdi">' . ($grand_total - ($yes + $missing)) . '</div>
                </div>
              ';

      break;

    case 'party_constituency_status':

      //  loop (valgkredse)
      //    loop (valgsteder)
      //      loop (frivillige)

      $data = array();
      foreach (entity_load('node', FALSE, array('type' => 'constituency')) as $constituency) {
        $data[$constituency->title] = array();
        $polling_station_nids = db_select('field_data_field_constituency', 'c')
                ->fields('c', array('entity_id'))
                ->condition('c.field_constituency_nid', $constituency->nid)
                ->execute()
                ->fetchAll(PDO::FETCH_COLUMN);

        foreach (node_load_multiple($polling_station_nids) as $polling_station) {
          //new version 13.09.2013 juulia@blueflex.eu
          $entity_ids = array();
          $data[$constituency->title][$polling_station->nid]['title'] = $polling_station->title;

          if ($items = field_get_items('node', $polling_station, 'field_volunteers_pr_party_1')) {
            foreach (array_values($items) as $value)
              $entity_ids[] = $value['value'];
          }
          foreach ($roles as $nid => $title) {
            if (!isset($data[$constituency->title][$polling_station->nid][$nid]['needed']))
              $data[$constituency->title][$polling_station->nid][$nid]['needed'] = 0;

            if (!isset($data[$constituency->title][$polling_station->nid][$nid]['total']))
              $data[$constituency->title][$polling_station->nid][$nid]['total'] = 0;

            if (!empty($entity_ids)) {
              $query = db_select('field_data_field_role_n' . $nid, 'vr');
              $query->innerJoin('field_data_field_party_list', 'vpp', 'vpp.entity_id=vr.entity_id');
              $query->addExpression('SUM(vr.field_role_n' . $nid . '_number_vo)');
              $query->condition('vpp.entity_id', $entity_ids, 'IN');
              if ($user_party_id) {
                $query->condition('vpp.field_party_list_party_list', $user_party_id);
              }
              $res = $query->execute()
                      ->fetchColumn();
              if (is_array($restrict_polling_stations) && !in_array($polling_station->nid, $restrict_polling_stations)) {
                continue;
              }
              $data[$constituency->title][$polling_station->nid][$nid]['needed']+=$res;
            }
          }
          $volunteer_nids = db_select('field_data_field_polling_station', 'ps')
                  ->fields('ps', array('entity_id'))
                  ->condition('ps.bundle', 'volunteers')
                  ->condition('ps.field_polling_station_nid', $polling_station->nid)
                  ->execute()
                  ->fetchAll(PDO::FETCH_COLUMN);

          foreach (node_load_multiple($volunteer_nids) as $volunteer) {

            if ($user_party_id && ($user_party_id != @$volunteer->field_party[$language->language][0]['tid'])) {
              continue;
            }

            if (isset($volunteer->field_polling_station_post[$language->language][0]['value']) &&
                    isset($volunteer->field_label[$language->language][0]['value'])
            ) {
              $data[$constituency->title][$polling_station->nid][$volunteer->field_label[$language->language][0]['value']]['total']++;
            }
          }
        }
      }
      //Add sorting to Valgstedskreds
      ksort($data);

      $output = '';

      foreach ($data as $constituency => $constituency_data) {
        $total = array();
        $table = array(
            'sticky' => FALSE,
            'header' => array_merge(array(
                $constituency,
                    ), array_values($roles)),
            'rows' => array()
        );

        // Add "i alt" label to header
        $table['header']['total'] = 'I alt';

        foreach ($constituency_data as $id => $polling_station_data) {

          $table['rows'][] = array(
              array('data' => l($polling_station_data['title'], 'volunteers/station/' . $id),
                  'class' => 'valgsted')
          );

          $row_nr = count($table['rows']) - 1;

          // Variables for storing polling station totals
          $polling_station_needed_total = 0;
          $polling_station_total_total = 0;

          foreach ($roles as $nid => $title) {
            isset($total[$nid]['needed']) ? $total[$nid]['needed']+= $polling_station_data[$nid]['needed'] : $total[$nid]['needed'] = $polling_station_data[$nid]['needed'];
            isset($total[$nid]['total']) ? $total[$nid]['total']+= $polling_station_data[$nid]['total'] : $total[$nid]['total'] = $polling_station_data[$nid]['total'];

            // Count totals
            $polling_station_needed_total += $polling_station_data[$nid]['needed'];
            $polling_station_total_total += $polling_station_data[$nid]['total'];

            $table['rows'][$row_nr][] = array(
                'data' => $polling_station_data[$nid]['total'] . '/' . $polling_station_data[$nid]['needed'], 'class' => 'vafva',
            );
          }

          // Add totals column to the row.
          $table['rows'][$row_nr][] = array(
              'data' => $polling_station_total_total . '/' . $polling_station_needed_total, 'class' => 'total',
          );
        }

        if (count($table['rows'])) {
          $table['rows'][][] = array('data' => 'I alt', 'class' => 'total');
          $row_nr = count($table['rows']) - 1;
          foreach ($roles as $nid => $title) {
            $table['rows'][$row_nr][] = array('data' => $total[$nid]['total'] . '/' . $total[$nid]['needed'], 'class' => 'total');
          }
          // Make the table pretty, add an empty field to the bottom row
          $table['rows'][$row_nr][] = array('data' => '', 'class' => 'total');
          $output .= theme('table', $table);
        }
      }
      $block['content'] = $output;
      break;
  }

  return $block;
}
