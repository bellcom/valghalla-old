<?php
/**
 * @file
 * Valhalla blocks module
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 *
 * This module is responsible for the overview/status blocks.
 *  - These blocks are fetched asynchronously. The 2 Drupal
 *    blocks just insert a placeholder to be filled out, and
 *    instansiate rendering of the markup.
 * As well as the change election and change party blocks.
 *  - These 2, do not rely on the frontpage, and can be used
 *    wherever.
 */

/**
 * Implements hook_block_info().
 */
function valhalla_blocks_block_info() {
  return array(
    'party_status' => array(
      'info' => t('Parti status'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'party_constituency_status' => array(
      'info' => t('Valgkredsstatus'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function valhalla_blocks_menu() {
  $items['valhalla_blocks/ajax/view'] = array(
    'page callback' => 'valhalla_block_ajax_view',
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
 * Implements hook_block_view().
 */
function valhalla_blocks_block_view($delta = '') {
  switch ($delta) {
    // The other blocks are fetched with AJAX. this is just simple markup to
    // fill.
    case 'party_status':
    case 'party_constituency_status':

      $block_cache = '';
      if (isset($_SESSION['election_nid'])) {
        global $user;
        $cache = cache_get($delta . '_' . $user->uid . '_' . $_SESSION['election_nid']);

        if ($cache) {
          $block_cache = $cache->data;
        }
      }

      drupal_add_js(drupal_get_path('module', 'valhalla_blocks') . '/js/valhalla_blocks.js', 'file');

      $output = '<div id="valhalla_block-' . $delta . '" >
        <div class="progress progress-striped active">
          <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
            <span>Opdaterer</span>
            </div>
          </div>
          <div class="content">' . $block_cache . '</div>
        </div><script>valhalla_blocks.loadOverview("' . $delta . '");</script>';

      return array("content" => $output);
  }
}
/**
 * AJAX block view.
 *
 * Renders markup for the AJAX'ed blocks.
 */
function valhalla_block_ajax_view($delta = '') {
  $markup = '';
  global $user;

  $user_entity = user_load($user->uid);
  $user_party_id = empty($user_entity->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user_entity->field_party[LANGUAGE_NONE][0]['tid'];

  // Get polling stations user is allowed to see.
  $restrict_polling_stations = array();
  if (!empty ($user_entity->field_polling_station[LANGUAGE_NONE])) {
    foreach ($user_entity->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  // Users selected election is in $_SESSION['election_nid'].
  $election_node = node_load($_SESSION['election_nid']);

  if (!is_object($election_node)) {
    print 'Der er ikke valgt noget valg';
    return;
  }

  // We need to know what polling stations are active in this
  // election.
  $polling_station_nids = odin_get_polling_stations($election_node->nid);

  if (empty($polling_station_nids)) {
    print 'Der er ingen valsteder på dette valg';
    return;
  }

  // We also need the roles.
  $roles = odin_get_roles();

  switch ($delta) {
    //
    // Party status (Overall).
    //
    case 'party_status':
      $count = odin_get_volunteers_count($_SESSION['election_nid'],
                                          array_keys($polling_station_nids),
                                          $roles,
                                          $user_party_id);
      $markup .= _valhalla_blocks_generate_overview_markup($count);
      break;

    //
    // Polling station status.
    //
    case 'party_constituency_status':
      // We need info on the polling station nodes (constituency)
      // So we just load them all.
      foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {
        // If the array of restricting stations is not empty we only let the
        // user see the polling stations in this array.
        if (!empty($restrict_polling_stations) &&
           !in_array($polling_station_nid, $restrict_polling_stations)) {
          continue;
        }

        $polling_station_count[$polling_station_nid] = odin_get_volunteers_count(
                                                                          $_SESSION['election_nid'],
                                                                          array($polling_station_nid),
                                                                          $roles,
                                                                          $user_party_id);
      }
      $constituency_nids = odin_get_constituencies($_SESSION['election_nid']);
      $markup .= _valhalla_blocks_generate_constituency_markup($constituency_nids, $polling_station_count);

      break;
  }

  global $user;
  cache_set($delta . '_' . $user->uid . '_' . $_SESSION['election_nid'], $markup);

  print $markup;
}

/**
 * Generate overview markup.
 */
function _valhalla_blocks_generate_overview_markup($count) {
  $label = _valhalla_blocks_get_label($count['total_count']);
  $markup = '
        <table class="table">
          <thead>
            <tr>
              <th></th>
              <th class="column-label">I alt</th>
              <th class="column-label">Mangler</th>
            </tr>
          </thead>
          <tr>
            <td><div class="partistatusenhed">Status total</div></td>
            <td class="column-count ' . $label . '">' . $count['total_count']['total'] . '/' . $count['total_count']['assigned'] . '</td>
            <td class="column-count">' . ($count['total_count']['assigned'] - $count['total_count']['total']) . '</td>
          </tr>
          <tr>
            <td>Bekræftede</td>
            <td class="column-count">' . $count['total_count']['rsvp_ok'] . '</td>
            <td></td>
          </tr>
          <tr>
            <td>Afviste</td>
            <td class="column-count">' . $count['total_count']['rsvp_no'] . '</td>
            <td></td>
          </tr>
          <tr>
            <td>Afventer svar</td>
            <td class="column-count">' . ($count['total_count']['total'] - ($count['total_count']['rsvp_ok'] + $count['total_count']['rsvp_no'])) . '</td>
            <td></td>
          </tr>

        </table>';

  $markup .= '<table class="table">
                <thead>
                  <tr>
                    <th>Roller</th>
                    <th class="column-label">I alt</th>
                    <th class="column-label">Mangler</th>
                  </tr>
                </thead>';

  $roles = odin_get_roles();

  foreach ($count['role_count'] as $role_nid => $role_count) {
    if ($role_count['assigned'] == 0) {
      // Skip roles that have no assigned posts.
      continue;
    }

    $label = _valhalla_blocks_get_label($role_count);
    $markup .= '
        <tr>
          <td class="column-first">' . $roles[$role_nid] . '</td>
          <td class="column-count ' . $label . '">' . $role_count['total']
          . '/' . $role_count['assigned'] . '</td>
          <td class="column-count">' .
          ($role_count['assigned'] - $role_count['total']) . '</td>
        </tr>';
  }

  $markup .= '</table>';

  return $markup;
}

/**
 * Generates table markup for constituency.
 */
function _valhalla_blocks_generate_constituency_markup($constituency_nids, $polling_station_count) {
  $roles = odin_get_roles();

  $constituencies = array();

  foreach ($constituency_nids as $constituency_nid => $polling_station_nids) {
    $constituency_node = node_load($constituency_nid);

    $constituency_total = array(
      'total_count' => array(
        'assigned' => 0,
        'total'    => 0,
        'rsvp_ok'  => 0,
        'rsvp_no'  => 0,
      ),
      'role_count' => array(),
    );

    // Count constituency totals.
    foreach ($polling_station_count as $polling_station_nid => $data) {
      if (in_array($polling_station_nid, array_keys($polling_station_nids))) {
        $constituency_total['total_count']['assigned'] += $data['total_count']['assigned'];
        $constituency_total['total_count']['total']    += $data['total_count']['total'];
        $constituency_total['total_count']['rsvp_ok']  += $data['total_count']['rsvp_ok'];
        $constituency_total['total_count']['rsvp_no']  += $data['total_count']['rsvp_no'];

        foreach ($data['role_count'] as $role_nid => $role_count) {
          if (!isset($constituency_total['role_count'][$role_nid])) {
            $constituency_total['role_count'][$role_nid] = array(
              'assigned' => 0,
              'total'    => 0,
              'rsvp_ok'  => 0,
              'rsvp_no'  => 0,
            );
          }
          $constituency_total['role_count'][$role_nid]['assigned'] += isset($role_count['assigned']) ? $role_count['assigned'] : 0;
          $constituency_total['role_count'][$role_nid]['total']    += isset($role_count['total'])    ? $role_count['total'] : 0;
          $constituency_total['role_count'][$role_nid]['rsvp_ok']  += isset($role_count['rsvp_ok'])  ? $role_count['rsvp_ok'] : 0;
          $constituency_total['role_count'][$role_nid]['rsvp_no']  += isset($role_count['rsvp_no'])  ? $role_count['rsvp_no'] : 0;
        }
      }
    }

    $header_markup = '';
    $bottom_markup = '';

    // Generate header and bottom rows, for each constituency.
    foreach ($roles as $role_nid => $role_title) {
      $header_markup .= '<th class="column-label">' . $role_title . '</th>';

      // Generate bottom totals row.
      $label = _valhalla_blocks_get_label($constituency_total['role_count'][$role_nid]);

      $bottom_markup .= '<td class="total column-count ' . $label . ' ">' . $constituency_total['role_count'][$role_nid]['total'];
      $bottom_markup .= '/' . $constituency_total['role_count'][$role_nid]['assigned'] . '</td>';
    }

    // Generate constituency status block.
    $markup = '<table class="table"><thead><tr><th>' . $constituency_node->title . '</th>';
    $markup .= $header_markup;
    $markup .= '<th class="column-label">I alt</th>';
    $markup .= '</tr></thead>';
    $markup .= _valhalla_blocks_generate_polling_station_markup($polling_station_nids,
                                                                $polling_station_count);

    $markup .= '<tr><td class="total">I alt</td>';
    $markup .= $bottom_markup;

    $label = _valhalla_blocks_get_label($constituency_total['total_count']);

    $markup .= '<td class="total column-count ' . $label . ' ">' . $constituency_total['total_count']['total'];
    $markup .= '/' . $constituency_total['total_count']['assigned'] . '</td>';
    $markup .= '</tr>';
    $markup .= '</table>';

    $constituencies[$constituency_node->title] = $markup;
  }

  ksort($constituencies);

  $markup = implode('', $constituencies);

  return $markup;
}

/**
 * Generates row markup for overview page.
 */
function _valhalla_blocks_generate_polling_station_markup($polling_station_nids, $polling_station_count) {
  $markup = '';

  foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {

    // Check if there is no assigned roles to the statation, and total count is zero.
    if ($polling_station_count[$polling_station_nid]['total_count']['total'] == 0 &&
        $polling_station_count[$polling_station_nid]['total_count']['assigned'] == 0 ) {
      continue;
    }

    $markup .= '<tr><td class="column-first"><a href="/volunteers/station/' . $polling_station_nid . '">';
    $markup .= $polling_station_title . '</a></td>';

    foreach ($polling_station_count[$polling_station_nid]['role_count'] as $role_nid => $role_count) {
      $label = _valhalla_blocks_get_label($role_count);

      $markup .= '<td class="column-count ' . $label . '">'  .    $role_count['total'] . '/' . $role_count['assigned'] . '</td>';
    }

    $label = _valhalla_blocks_get_label($polling_station_count[$polling_station_nid]['total_count']);

    $markup .= '<td class="column-count ' . $label . '">'  .  $polling_station_count[$polling_station_nid]['total_count']['total'];
    $markup .= '/' . $polling_station_count[$polling_station_nid]['total_count']['assigned'] . '</td>';

    $markup .= '</tr>';
  }
  return $markup;
}

/**
 * Helper, find status label.
 */
function _valhalla_blocks_get_label($count) {
  $label = '';
  if ($count['total'] == $count['assigned']) {
    $label = 'warning';
  }
  if ($count['rsvp_ok'] == $count['assigned']) {
    $label = 'success';
  }
  if ($count['rsvp_no']) {
    $label = 'danger';
  }
  return $label;
}
