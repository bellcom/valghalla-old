<?php
/**
 * @file
 * Volunteer validate module.
 */

/**
 * Implements hook_menu().
 */
function valghalla_volunteer_validator_menu() {
  $items['admin/valghalla/validator'] = array(
    'title' => 'Deltager validering',
    'description' => 'Indstillinger for CPR validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_settings'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/valghalla/validator/batch'] = array(
    'title' => 'Deltager validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_batch'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function valghalla_volunteer_validator_ctools_plugin_type() {
  return array(
    'cpr_service' => array(
      'use hooks' => TRUE,
    ),
    'validate' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_validate().
 */
function valghalla_volunteer_validator_node_validate($node, $form, &$form_state) {
  if ($node->type != 'volunteers') {
    return;
  }

  if ($form_state['clicked_button']['#parents'][0] == 'delete') {
    return;
  }

  $cpr_field = reset($form_state['values']['field_cpr_number']);
  $cpr = $cpr_field[0]['value'];

  // Check formatting.
  if (!valghalla_volunteer_validator_validate_format($cpr)) {
    form_set_error('field_cpr_number', t('Det angivne CPR-nummer er ikke korrekt formatteret (f.eks. 123456-8910).'));
  }

  // Check for duplicates.
  if ($nid = valghalla_volunteer_validator_check_duplicates($cpr)) {
    if ($nid !== $node->nid) {
      form_set_error('field_cpr_number', t('Der er allerede oprettet en deltager med det angivne CPR-nummer'));
    }
  }

  // Query service.
  if (variable_get('valghalla_volunteer_validator_enable', FALSE)) {
    // To reduce calls to the service, we fetch the address right away, if
    // address querying is enabled.
    if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
      $message = valghalla_volunteer_validator_query_service('get_address', $cpr);

      if ($message['status']) {
        // If we successfully fetch address data from the service, save this to
        // the volunteer.
        // These are the fields, and their corresponding offsets from the
        // service message array.
        $field_map = array(
          'field_address_road' => 'road',
          'field_address_road_no' => 'road_no',
          'field_address_floor' => 'floor',
          'field_address_door' => 'door',
          'field_address_zipcode' => 'zipcode',
          'field_address_city' => 'city',
          'field_address_coname' => 'coname',
        );

        if (variable_get('valghalla_volunteer_validator_get_name')) {
          form_set_value($form['title'], $message['name'], $form_state);
        }

        foreach ($field_map as $field => $index) {
          $language = field_language('node', $node, $field);

          form_set_value(array(
            '#parents' => array($field, $language, 0, 'value')), $message[$index], $form_state
          );
        }
      }
    }
    else {
      $message = valghalla_volunteer_validator_query_service('validate_cpr', $cpr);
    }
    if (!$message['status']) {
      form_set_error('field_cpr_number', t('Det angivne CPR-nummer kan ikke valideres:') . ' ' . $message['text']);
    }

    $validate_result = valghalla_volunteer_validator_validate($node, $message);
    $invalid_text = '';

    if ($validate_result) {
      foreach ($validate_result as $result) {
        if (!$result['valid']) {
          $invalid_text .= $result['text'] . '<br />';
        }
      }
      if ($invalid_text) {
        form_set_error('field_cpr_number', t('Deltageren kan ikke valideres:') . ' ' . $result['text']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable address fields, and let user know that the values
 * will be fetched from the CPR service.
 */
function valghalla_volunteer_validator_form_volunteers_node_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
    $fields = array(
      'field_address_road',
      'field_address_road_no',
      'field_address_floor',
      'field_address_door',
      'field_address_zipcode',
      'field_address_city',
      'field_address_coname',
    );

    foreach ($fields as $field) {
      $form[$field]['#disabled'] = TRUE;
      $form[$field]['#suffix'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';
    }
  }

  if (variable_get('valghalla_volunteer_validator_get_name')) {
    if (!$form['title']['#default_value']) {
      $form['title']['#default_value'] = 'Hentes når indholdet gemmes';
    }
    $form['title']['#disabled'] = TRUE;
    $form['title']['#suffix'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';
  }
}

/**
 * Validate the format of the CPR number.
 *
 * The format must be 123456-1234
 */
function valghalla_volunteer_validator_validate_format($cpr) {
  return preg_match("/^[0-9]{6}-[0-9]{4}$/", $cpr);
}

/**
 * Check if the cpr is used already.
 *
 * If it is we send back the nid for the volunteer.
 */
function valghalla_volunteer_validator_check_duplicates($cpr) {
  if ($volunteer = _valghalla_helper_get_volunteer_by_cpr($cpr)) {
    return $volunteer->nid;
  }
  return FALSE;
}

/**
 * Query cpr service.
 */
function valghalla_volunteer_validator_query_service($action, $cpr) {
  ctools_include('plugins');
  if ($service = variable_get('valghalla_volunteer_validator_cpr_service', FALSE)) {
    $plugin = ctools_get_plugins('valghalla_volunteer_validator', 'cpr_service', $service);

    if (isset($plugin[$action]) && function_exists($plugin[$action])) {
      $message = call_user_func($plugin[$action], $cpr);
    }
    else {
      $message = array('status' => FALSE, 'text' => 'Den valgte service er utilstrækkelig, "' . $action . '" er ikke implementeret.');
    }
    return $message;
  }
  return array('status' => TRUE);
}

/**
 * Validate volunteer, using enabled plugins.
 */
function valghalla_volunteer_validator_validate(&$volunteer, $cpr_message) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'validate');

  $enabled = variable_get('valghalla_volunteer_validator_services', array());

  $log = array();
  foreach ($enabled as $service) {
    if (isset($plugins[$service])) {
      $callback = $plugins[$service]['validate'];
      $message = call_user_func($callback, $volunteer, $cpr_message);

      if (!$message['valid']) {
        $log[$service] = $message;
      }
    }
  }

  if (count($log)) {
    return $log;
  }
  return FALSE;
}

/**
 * Get a volunteers CPR.
 */
function valghalla_volunteer_validator_get_cpr($volunteer) {
  ctools_include('plugins');
  if ($service = variable_get('valghalla_volunteer_validator_cpr_service', FALSE)) {
    $plugin = ctools_get_plugins('valghalla_volunteer_validator', 'cpr_service', $service);

    if (isset($plugin['get_cpr'])) {
      if ($field = field_get_items('node', $volunteer, 'field_address_road')) {
        $volunteer_info['road'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_road_no')) {
        $volunteer_info['road_no'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_floor')) {
        $volunteer_info['floor'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_zipcode')) {
        $volunteer_info['zipcode'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_cpr_number')) {
        $volunteer_info['birthdate'] = substr($field[0]['value'], 0, 6);
      }

      $volunteer_info['name'] = $volunteer->title;

      $return = call_user_func($plugin['get_cpr'], $volunteer_info);
      $language = field_language('node', $volunteer, 'field_cpr_number');

      if ($return['status'] == 'success') {
        $cpr = substr($return['pnr'], 0, 6) . '-' . substr($return['pnr'], 6, 10);

        $volunteer->field_cpr_number[$language][0]['value'] = $cpr;
      }

      $volunteer->field_cpr_valid_date[$language][0]['value'] = time();
      $volunteer->field_cpr_status[$language][0]['value'] = $return['status'];

      node_save($volunteer);
    }
  }
}
