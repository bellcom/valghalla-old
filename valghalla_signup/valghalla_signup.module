<?php
/**
 * @file
 * Valghalla signup module.
 */

/**
 * Implements hook_menu().
 */
function valghalla_signup_menu() {
  $items = array();

  $items['valghalla/administration/signup'] = array(
    'title' => 'Ekstern tilmelding',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_signup_administration_form'),
    'access arguments' => array('administer valghalla'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['valghalla/signup'] = array(
    'title' => variable_get('valghalla_signup_page_title', 'Tilmelding som valgtilforordnet'),
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_signup_signup_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_valghalla_allowed_uris_alter().
 */
function valghalla_signup_valghalla_allowed_uris_alter(&$allowed_uris) {
  $allowed_uris[] = '/valghalla/signup';
  $allowed_uris[] = '/system/ajax*';
}

/**
 * Form callback for administration page.
 */
function valghalla_signup_administration_form() {
  $form['valghalla_signup_enable'] = array(
    '#title' => t('Aktiver ekstern tilmelding'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('valghalla_signup_enable', FALSE),
  );

  $form['valghalla_signup_page_title'] = array(
    '#title' => t('Titel på tilmeldingside'),
    '#descripton' => t('Drupals cache skal slettes efter opdatering'),
    '#type' => 'textfield',
    '#default_value' => variable_get('valghalla_signup_page_title', 'Tilmelding som valgtilforordnet'),
  );

  $elections = node_load_multiple(array(), array('type' => 'election'));

  $election_options[0] = t('Vælg');

  foreach ($elections as $node) {
    $election_options[$node->nid] = $node->title;
  }

  $form['valghalla_signup_max_qty'] = array(
    '#title' => t('Antal deltagere'),
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer_positive'),
    '#default_value' => variable_get('valghalla_signup_max_qty', 3),
  );

  $form['valghalla_signup_election_nid'] = array(
    '#title' => t('Valg'),
    '#type' => 'select',
    '#default_value' => variable_get('valghalla_signup_election_nid', FALSE),
    '#options' => $election_options,
  );

  $form['valghalla_signup_roles'] = array(
    '#title' => t('Roller'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => odin_get_roles(),
    '#default_value' => variable_get('valghalla_signup_roles', FALSE),
  );

  $form['valghalla_signup_party_tid'] = array(
    '#title' => t('Parti'),
    '#type' => 'select',
    '#options' => odin_get_parties(),
    '#default_value' => variable_get('valghalla_signup_party_tid', FALSE),
  );

  $form['valghalla_signup_signup_message'] = array(
    '#type' => 'textarea',
    '#title' => 'Besked på tilmeldingsside',
    '#default_value' => variable_get('valghalla_signup_signup_message', ''),
  );

  $form['valghalla_signup_submit_message'] = array(
    '#type' => 'textarea',
    '#title' => 'Besked ved endt tilmelding',
    '#default_value' => variable_get('valghalla_signup_submit_message', ''),
  );

  $form['valghalla_signup_closed_message'] = array(
    '#type' => 'textarea',
    '#title' => 'Besked ved lukket tilmelding',
    '#default_value' => variable_get('valghalla_signup_closed_message', ''),
  );

  global $base_url;
  $url = $base_url . '/valghalla/signup';
  $form['valghalla_signup_description'] = array(
    '#markup' => 'Når ekstern tilmelding er aktiveret kan tilmeldingsformularen ses på: ' . l($url, $url),
    '#type' => 'item',
  );

  $form = system_settings_form($form);

  $form['#submit'][] = 'valghalla_signup_settings_submit';
  return $form;
}

/**
 * Extra submit handler for settings form.
 */
function valghalla_signup_settings_submit(&$form, &$form_submit) {
  menu_rebuild();
}

/**
 * Implements hook_theme().
 */
function valghalla_signup_theme() {
  return array(
    'signup_page' => array(
      'template' => 'signup_page',
    ),
  );
}

/**
 * Page callback for signup.
 */
function valghalla_signup_signup_page() {
  global $base_url;
  $variables = array();
  $variables['signup_form'] = drupal_render(drupal_get_form('valghalla_signup_signup_form'));

  return theme('signup_page', $variables);
}

/**
 * Implements hook_init().
 */
function valghalla_signup_init() {
  if (current_path() == 'valghalla/signup') {
    drupal_add_library('system', 'ui.autocomplete');
    drupal_add_js(drupal_get_path('module', 'valghalla_signup') . '/js/address.js');
  }
}

/**
 * Form callback, for signup.
 */
function valghalla_signup_signup_form($form, &$form_state) {
  $election_nid = variable_get('valghalla_signup_election_nid', FALSE);
  $election_node = node_load($election_nid);
  $signup_roles = variable_get('valghalla_signup_roles', array());
  $roles = odin_get_roles();
  $role_options = array('Vælg rolle');

  foreach ($signup_roles as $nid) {
    if ($role_node = node_load($nid)) {
      if ($description_field = field_get_items('node', $role_node, 'field_description')) {
        $role_options[$nid] = $description_field[0]['value'];
      }
    }
  }

  $expired = TRUE;
  if ($field_election_date = field_get_items('node', $election_node, 'field_date')) {
    $election_timestamp = strtotime($field_election_date[0]['value']);
    if (time() < $election_timestamp) {
      $expired = FALSE;
    }
  }

  if (!variable_get('valghalla_signup_enable', FALSE) || $expired) {
    $form['message']['#markup'] = nl2br(variable_get('valghalla_signup_closed_message', '')) . '<br />';
    return $form;
  }

  // Show message if the volunteers are saved.
  if ($form_state['submitted']) {
    $form['message']['#markup'] = nl2br(variable_get('valghalla_signup_submit_message', ''));
    return $form;
  }

  $qty = isset($form_state['values']['qty']) ? $form_state['values']['qty'] : FALSE;
  $role_nid = isset($form_state['values']['role_nid']) ? $form_state['values']['role_nid'] : 'Vælg rolle';

  $locked = $qty && $role_nid;

  $form['message']['#markup'] = nl2br(variable_get('valghalla_signup_signup_message', '')) . '<br />';

  $form['message']['#markup'] .= '<hr>';

  $max_qty = variable_get('valghalla_signup_max_qty', 3);

  $qty_options[0] = 'Vælg antal';
  for ($i = 1; $i <= $max_qty; $i++) {
    $qty_options[$i] = $i;
  }

  $form['qty'] = array(
    '#title' => 'Antal deltagere',
    '#type' => 'select',
    '#disabled' => $locked,
    '#default_value' => $qty,
    '#options' => $qty_options,
    '#attributes' => array('onChange' => 'document.getElementById("valghalla-signup-signup-form").submit();'),
  );

  $form['role_nid'] = array(
    '#title' => 'Rolle',
    '#type' => 'select',
    '#disabled' => $locked,
    '#default_value' => $role_nid,
    '#options' => $role_options,
    '#attributes' => array('onChange' => 'document.getElementById("valghalla-signup-signup-form").submit();'),
  );

  if ($locked) {
    $form['qty']['#prefix'] = '<div class="row"><div class="col-sm-5">';
    $form['qty']['#suffix'] = '</div>';

    $form['role_nid']['#prefix'] = '<div class="col-sm-6">';
    $form['role_nid']['#suffix'] = '</div>';

    $form['reset'] = array(
      '#type' => 'button',
      '#value' => 'Nulstil',
      '#attributes' => array('onClick' => 'window.location = window.location.href;'),
      '#prefix' => '<div class="col-sm-1 form-reset">',
      '#suffix' => '</div></div>',
    );

    if ($pollingstations = valghalla_signup_get_avaiable_polling_stations($election_nid, $qty, $role_nid)) {

      array_unshift($pollingstations, 'Vælg valgsted');
      $form['pollingstation_nid'] = array(
        '#type' => 'select',
        '#title' => 'Valgsteder - Med ledige pladser',
        '#options' => $pollingstations,
      );

      $form['volunteers']['#tree'] = TRUE;
      for ($i = 1; $i <= $qty; $i++) {
        $form['volunteers'][$i] = array(
          '#type' => 'fieldset',
          '#title' => 'Deltager nr. ' . $i,
          '#tree' => TRUE,
        );
        $form['volunteers'][$i]['name'] = array(
          '#title' => 'Navn',
          '#type' => 'textfield',
          '#required' => TRUE,
        );

        $form['volunteers'][$i]['birthdate'] = array(
          '#title' => 'Fødselsdato',
          '#type' => 'date',
          '#required' => TRUE,
          '#date_format' => 'd-m-Y',
          '#pre_render' => array('_valghalla_signup_birthdate_pre_render'),
        );

        $form['volunteers'][$i]['zipcode'] = array(
          '#required' => TRUE,
          '#title' => 'Postnummer',
          '#type' => 'textfield',
          '#prefix' => '<div class="row"><div class="col-sm-6">',
          '#suffix' => '</div>',
        );

        $form['volunteers'][$i]['city'] = array(
          '#title' => 'By',
          '#type' => 'textfield',
          '#required' => TRUE,
          '#prefix' => '<div class="col-sm-6">',
          '#suffix' => '</div></div>',
          '#attributes' => array('readonly' => 'readonly'),
        );

        $form['volunteers'][$i]['road'] = array(
          '#title' => 'Vejnavn',
          '#type' => 'textfield',
          '#required' => TRUE,
          '#prefix' => '<div class="row"><div class="col-sm-6">',
          '#suffix' => '</div>',
        );

        $form['volunteers'][$i]['road_no'] = array(
          '#required' => TRUE,
          '#title' => 'Husnummer',
          '#type' => 'textfield',
          '#prefix' => '<div class="col-sm-2">',
          '#suffix' => '</div>',
        );

        $form['volunteers'][$i]['floor'] = array(
          '#title' => 'Etage',
          '#type' => 'textfield',
          '#prefix' => '<div class="col-sm-2">',
          '#suffix' => '</div>',
        );

        $form['volunteers'][$i]['door'] = array(
          '#title' => 'Dør/side',
          '#type' => 'textfield',
          '#prefix' => '<div class="col-sm-2">',
          '#suffix' => '</div></div>',
        );

        $form['volunteers'][$i]['email'] = array(
          '#required' => TRUE,
          '#title' => 'E-mail',
          '#type' => 'textfield',
          '#prefix' => '<div class="row"><div class="col-sm-6">',
          '#suffix' => '</div>',
        );

        $form['volunteers'][$i]['phone'] = array(
          '#required' => TRUE,
          '#title' => 'Telefon',
          '#type' => 'textfield',
          '#prefix' => '<div class="col-sm-6">',
          '#suffix' => '</div></div>',
        );

        $form['volunteers'][$i]['comment'] = array(
          '#title' => 'Evt. besked',
          '#type' => 'textarea',
        );
      }

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Send',
      );
    }
    else {
      $form['no_results']['#markup'] = '<div class="no-results">Der findes ingen valgsteder med det antal ledige pladser</div>';

    }
  }

  return $form;
}

/**
 * Pre render function setting birthday default value empty.
 */
function _valghalla_signup_birthdate_pre_render($element) {
  $element['day']['#value'] = ' ';
  array_unshift($element['day']['#options'], ' ');

  $element['month']['#value'] = ' ';
  array_unshift($element['month']['#options'], ' ');

  $element['year']['#value'] = ' ';
  array_unshift($element['year']['#options'], '');

  return $element;
}

/**
 * Validation for signup form.
 */
function valghalla_signup_signup_form_validate($form, &$form_state) {
  if (isset($form_state['values']['volunteers'])) {
    if ($form_state['values']['pollingstation_nid'] <= 0) {
      form_set_error('pollingstation_nid', 'Du skal vælge et valgsted.');
    }

    foreach ($form_state['values']['volunteers'] as $id => $volunteer) {
      if (!valid_email_address($volunteer['email'])) {
        form_set_error($id . '][email]', 'Ikke gyldig emailadresse');
      }
      if (strlen((int) $volunteer['phone']) != 8) {
        form_set_error('volunteers][' . $id . '][phone', 'Ikke gyldigt telefonnummer.');
      }
      if (strlen((int) $volunteer['zipcode']) != 4) {
        form_set_error('volunteers][' . $id . '][zipcode', 'Ikke gyldigt postnummer.');
      }
      if (strlen((int) $volunteer['road_no']) < 1 || $volunteer['road_no'] == 0) {
        form_set_error('volunteers][' . $id . '][road_no', 'Ikke gyldigt husnummer.');
      }

      $url = 'https://dawa.aws.dk/adresser?vejnavn=' . urlencode($volunteer['road']) . '&husnr=' . $volunteer['road_no'] . '&postnr=' . $volunteer['zipcode'];

      $response = file_get_contents($url);

      $response_array = json_decode($response);

      if (count($response_array) < 1) {
        form_set_error('volunteers][' . $id . '][road', 'Ikke gyldig adresse.');
      }
    }
  }
}

/**
 * Submit handler for signup form.
 */
function valghalla_signup_signup_form_submit($form, &$form_state) {
  // Check that the seats are not taken, before we add the volunteers.
  $qty = $form_state['values']['qty'];
  $role_nid = $form_state['values']['role_nid'];
  $election_nid = variable_get('valghalla_signup_election_nid', FALSE);

  $polling_station_nids = valghalla_signup_get_avaiable_polling_stations($election_nid, $qty, $role_nid);

  $polling_station_nid = $form_state['values']['pollingstation_nid'];
  foreach ($polling_station_nids as $constituency) {
    if ($ok = isset($pollingstations[$polling_station_nid])) {
      break;
    }
    if ($ok = isset($constituency[$polling_station_nid])) {
      break;
    }
  }

  if ($ok) {
    foreach ($form_state['values']['volunteers'] as $id => $volunteer) {
      $volunteer['role_nid'] = $role_nid;
      valghalla_signup_add_volunteer($volunteer, $polling_station_nid);
    }
    $form_state['submitted'] = TRUE;
  }
  else {
    drupal_set_message('Pladserne er desværre blevet optaget. Vælg evt. et andet valgsted.', 'warning');
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Create node for volunteer, add to polling station.
 */
function valghalla_signup_add_volunteer($volunteer, $polling_station_nid) {
  $volunteer_node = new stdClass();
  $volunteer_node->type = 'volunteers';
  $volunteer_node->language = LANGUAGE_NONE;
  node_object_prepare($volunteer_node);
  $volunteer_node->status = 1;

  $volunteer_node->title = $volunteer['name'];

  $cpr = str_pad($volunteer['birthdate']['day'], 2, 0, STR_PAD_LEFT)
         . str_pad($volunteer['birthdate']['month'], 2, 0, STR_PAD_LEFT)
         . (substr($volunteer['birthdate']['year'], -2) - 1);

  $volunteer_party_tid = variable_get('valghalla_signup_party_tid', FALSE);

  $volunteer_node->field_cpr_number[LANGUAGE_NONE][]['value'] = $cpr;
  $volunteer_node->field_address_road[LANGUAGE_NONE][]['value'] = $volunteer['road'];
  $volunteer_node->field_address_road_no[LANGUAGE_NONE][]['value'] = $volunteer['road_no'];
  $volunteer_node->field_address_floor[LANGUAGE_NONE][]['value'] = $volunteer['floor'];
  $volunteer_node->field_address_door[LANGUAGE_NONE][]['value'] = $volunteer['door'];
  $volunteer_node->field_address_zipcode[LANGUAGE_NONE][]['value'] = $volunteer['zipcode'];
  $volunteer_node->field_address_city[LANGUAGE_NONE][]['value'] = $volunteer['city'];
  $volunteer_node->field_email[LANGUAGE_NONE][]['email'] = $volunteer['email'];
  $volunteer_node->field_phone[LANGUAGE_NONE][]['value'] = $volunteer['phone'];
  $volunteer_node->field_party[LANGUAGE_NONE][]['tid'] = $volunteer_party_tid;
  $volunteer_node->field_rsvp_comment[LANGUAGE_NONE][]['value'] = $volunteer['comment'];

  $volunteer_node->field_external_signup[LANGUAGE_NONE][]['value'] = 1;

  node_save($volunteer_node);

  if (function_exists('valghalla_volunteer_validator_get_cpr')) {
    valghalla_volunteer_validator_get_cpr($volunteer_node);
  }

  $role_nid = $volunteer['role_nid'];
  $election_nid = variable_get('valghalla_signup_election_nid', FALSE);
  $party_tid = odin_party_tid_for_next_free_seat($election_nid, $polling_station_nid, $role_nid);

  if ($volunteer_node->nid && $polling_station_nid && $role_nid && $party_tid && $election_nid) {
    valghalla_volunteers_add_volunteer_to_post($volunteer_node->nid, $polling_station_nid, $role_nid, $party_tid, $election_nid, 1);
  }
  else {
    // If the post cannot be added, we have no need for the volunteer.
    node_delete($volunteer_node->nid);
  }
}

/**
 * Helper, get a list of polling stations with enough free spots.
 */
function valghalla_signup_get_avaiable_polling_stations($election_nid, $qty, $role_nid) {
  $election_node = node_load($election_nid);

  $roles[$role_nid] = $role_nid;

  // Generate options list, with polling stations with enough free seats.
  $polling_stations_field = field_get_items('node', $election_node, 'field_polling_stations');

  foreach ($polling_stations_field as $data) {
    $polling_station_nids[$data['target_id']] = $data['target_id'];
  }

  $options = array();
  $constituencies = array();
  $polling_stations = array();
  foreach (node_load_multiple($polling_station_nids) as $polling_station) {
    $count = odin_get_volunteers_count($election_node->nid, array($polling_station->nid), $roles);

    if (($count['total_count']['assigned'] - $count['total_count']['total']) >= $qty) {
      if ($constituency_field = field_get_items('node', $polling_station, 'field_constituency')) {
        // We save the data in 2 arrays, and don't populate options yes, as we
        // have to sort the options according to the title of the
        // constituencies.
        $constituency = node_load($constituency_field[0]['nid']);
        $constituencies[$constituency->nid] = $constituency->title;
        $polling_stations[$constituency->nid][$polling_station->nid] = $polling_station->title;
      }
      else {
        $options[$polling_station->nid] = $polling_station->title;
      }
    }
  }

  if ($constituencies && $polling_stations) {
    natsort($constituencies);

    foreach ($constituencies as $constituency_nid => $constituency_title) {
      $options[$constituency_title] = $polling_stations[$constituency_nid];
    }
  }

  return $options;
}
